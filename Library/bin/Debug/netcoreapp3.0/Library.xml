<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="M:Library.Controllers.BookController.Get">
             <summary>
             Get all books.
             </summary>
             <remarks>
             Sample request:
            
                 POST /Book
                 {
                    
                 }
            
             </remarks>
             <param></param>
             <returns>
             {
               "childResult": [
                   {
                       "id": 6,
                       "name": "putted_book",
                       "auhorId": 1,
                       "languageId": 1,
                        "publishingHouseId": 1,
                       "categoryId": 3,
                       "locationId": 1,
                       "updatedBy": null,
                       "deletedBy": null,
                      "updatedOn": null,
                       "deletedOn": null,
                       "isDeleted": false,
                       "rating": 5
                  },
                  {
                      "id": 5,
                      "name": "book2",
                       "auhorId": 1,
                       "languageId": 1,
                       "publishingHouseId": 1,
                       "categoryId": 3,
                       "locationId": 1,
                        "updatedBy": null,
                        "deletedBy": null,
                        "updatedOn": null,
                        "deletedOn": null,
                        "isDeleted": true,
                       "rating": 5
                  }
                  ],
               "code": null,
               "message": null
             }
             </returns>
             <response code="200">Returns all books</response>
             <response code="404">If the books don't exist</response> 
        </member>
        <member name="M:Library.Controllers.BookController.Get(System.Int32)">
             <summary>
             Get a book.
             </summary>
             <remarks>
             Sample request:
            
                 POST /Book
                 {
                 
                 }
            
             </remarks>
             <param name="id"></param>
             <returns></returns>
             <response code="200">Returns the book with given id</response>
             <response code="404">If the book don't exist</response> 
        </member>
        <member name="M:Library.Controllers.BookController.Post(Library.Models.Inputs.IBook)">
             <summary>
             Creates a book.
             </summary>
             <remarks>
             Sample request:
            
                 POST /Book
                 {
                    {
                         "name": "book_new_created",
                         "auhorId": 1,
                         "languageId": 1,
                         "publishingHouseId": 1,
                         "categoryId": 3,
                         "locationId": 1,
                         "updatedBy": null,
                         "deletedBy": null,
                         "updatedOn": null,
                         "deletedOn": null,
                         "isDeleted": false,
                         "rating": 5
                     }
                 }
            
             </remarks>
             <param name="newBook"></param>
             <returns></returns>
             <response code="201">Returns the newly created book</response>
             <response code="400">The request body's Book object is invalid.</response> 
        </member>
        <member name="M:Library.Controllers.BookController.Put(System.Int32,Library.Models.Inputs.IBook)">
             <summary>
             Updates the book.
             </summary>
             <remarks>
             Sample request:
            
                 POST /Book
                 {
                    {
                         "name": "putted_book",
                         "auhorId": 1,
                         "languageId": 1,
                         "publishingHouseId": 1,
                         "categoryId": 3,
                         "locationId": 1,
                         "updatedBy": null,
                         "deletedBy": null,
                         "updatedOn": null,
                         "deletedOn": null,
                         "isDeleted": false,
                         "rating": 5
                     }
                 }
            
             </remarks>
             <param name="id"></param>
             <param name="updatedBook"></param>
             <returns></returns>
             <response code="200">Returns the newly updated book</response>
             <response code="400">The request body's Id value doesn't match the route's id value.</response> 
             <response code="400">The request body's Book object is invalid.</response> 
        </member>
        <member name="M:Library.Controllers.BookController.Delete(System.Int32)">
             <summary>
             Deletes a book.
             </summary>
             <remarks>
             Sample request:
            
                 POST /Book
                 {   
                     "id": 4  
                 }
            
             </remarks>
             <param name="id"></param>
             <returns></returns>
             <response code="204">Returns the newly deleted book</response>
             <response code="404">A book matching the provided id parameter doesn't exist in the database.</response> 
        </member>
    </members>
</doc>
